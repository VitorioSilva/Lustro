name: Validate and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate code structure
      run: |
        echo "🔍 Validando estrutura do código..."
        
        # Testar imports críticos
        python -c "
        print('1. 🔧 Testando imports...')
        try:
            from app import create_app, db
            from app.utils.security import validate_email, validate_password_strength, validate_name
            from app.models import User, Veiculo, Servico, Agendamento
            print('✅ Todos os imports funcionam')
        except ImportError as e:
            print(f'❌ Erro de import: {e}')
            exit(1)
        
        print('2. 🧪 Testando validações...')
        # Testar validação de email Gmail
        is_valid, msg = validate_email('teste@gmail.com')
        assert is_valid == True, 'Email Gmail deve ser válido'
        print('✅ Email Gmail válido')
        
        # Testar validação de email não Gmail
        is_valid, msg = validate_email('teste@yahoo.com')
        assert is_valid == False, 'Email não Gmail deve ser inválido'
        print('✅ Email não Gmail bloqueado')
        
        # Testar validação de senha forte
        is_valid, msg = validate_password_strength('SenhaForte123!')
        assert is_valid == True, 'Senha forte deve passar'
        print('✅ Senha forte aceita')
        
        # Testar validação de senha fraca
        is_valid, msg = validate_password_strength('12345678')
        assert is_valid == False, 'Senha sequencial deve falhar'
        print('✅ Senha sequencial bloqueada')
        
        print('3. 🏗️ Testando criação do app...')
        app = create_app()
        with app.app_context():
            print('✅ App Flask criado com sucesso')
        
        print('🎉 TODAS AS VALIDAÇÕES PASSARAM!')
        "

  deploy-notification:
    needs: validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Vercel
      run: |
        echo '✅ Validações passaram! Vercel fará deploy automático.'
        echo '🌐 Seu backend estará disponível em: https://lustro-black.vercel.app'